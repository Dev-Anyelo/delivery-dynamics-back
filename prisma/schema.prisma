datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Enums
enum OperationType {
  delivery
  sales
}

enum PointOfInterestType {
  distribution_center
  warehouse
  store
  headquarters
}

enum PaymentMethodType {
  cash
  credit_card
  credit_note
  check
  bank_transfer
  other
}

enum OrderStatus {
  pending
  in_progress
  completed
  delivered
  partially_delivered
  cancelled
}

// --- MODELOS ---

model PointOfInterest {
  id        String              @id
  name      String
  address   String?
  latitude  Float
  longitude Float
  type      PointOfInterestType

  startPlans  Plan[]  @relation("PlanStartPoint")
  endPlans    Plan[]  @relation("PlanEndPoint")
  routeStarts Route[] @relation("RouteStartPoint")
  routeEnds   Route[] @relation("RouteEndPoint")
}

model Customer {
  id    String  @id
  name  String
  phone String?
  email String?

  addresses Address[]
  visits    Visit[]
  orders    Order[]
}

model Address {
  id           String  @id
  label        String?
  address      String
  latitude     Float
  longitude    Float
  phone        String?
  notes        String?
  contact      String?
  businessType String

  customerId String? // hecho opcional
  customer   Customer? @relation(fields: [customerId], references: [id])

  firstDeliveryTimeWindowId  String?
  firstDeliveryTimeWindow    TimeWindow? @relation("FirstDelivery", fields: [firstDeliveryTimeWindowId], references: [id])
  secondDeliveryTimeWindowId String?
  secondDeliveryTimeWindow   TimeWindow? @relation("SecondDelivery", fields: [secondDeliveryTimeWindowId], references: [id])

  visits     Visit[]
  orders     Order[]
  routeStops RouteStop[]
}

model TimeWindow {
  id          String   @id @default(cuid())
  openingTime DateTime
  closingTime DateTime

  firstForAddresses  Address[] @relation("FirstDelivery")
  secondForAddresses Address[] @relation("SecondDelivery")
}

model BusinessSegment {
  id   String  @id
  name String?

  plans  Plan[]
  orders Order[]
}

model Plan {
  id                String           @id
  operationType     OperationType
  date              DateTime
  activeDates       DateTime[]
  assignedUserId    String?
  businessSegmentId String?
  businessSegment   BusinessSegment? @relation(fields: [businessSegmentId], references: [id])

  routeId      String?
  route        Route?  @relation(fields: [routeId], references: [id])
  truckId      String?
  truck        Truck?  @relation(fields: [truckId], references: [id])
  truckTypeId  String?
  routeGroupId String?

  startPointId String
  startPoint   PointOfInterest @relation("PlanStartPoint", fields: [startPointId], references: [id])
  endPointId   String
  endPoint     PointOfInterest @relation("PlanEndPoint", fields: [endPointId], references: [id])

  plannedStartTimestamp DateTime?
  plannedEndTimestamp   DateTime?
  plannedTotalTimeH     Float?
  plannedDriveTimeH     Float?
  plannedServiceTimeH   Float?
  plannedWaitTimeH      Float?
  plannedBreakTimeH     Float?
  plannedEndBreakTimeH  Float?
  plannedDistanceKm     Float?

  actualStartTimestamp DateTime?
  actualEndTimestamp   DateTime?
  startLatitude        Float?
  startLongitude       Float?
  endLatitude          Float?
  endLongitude         Float?

  batchId             String?
  enableTelematicsGps Boolean
  enableAutoArrival   Boolean
  enableAutoStart     Boolean
  numHelpers          Int

  visits Visit[]
  orders Order[]
}

model Visit {
  id       String @id
  sequence Int?

  planId String?
  plan   Plan?   @relation(fields: [planId], references: [id])

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  addressId String?
  address   Address? @relation(fields: [addressId], references: [id])

  deliveryOrders Order[] @relation("DeliveryVisitOrders")
  pickupOrders   Order[] @relation("PickupVisitOrders")

  paymentMethods       PaymentMethod[]
  reassignedDeliveries DeliveryReassignment[]
}

model Order {
  id     String @id
  planId String
  plan   Plan   @relation(fields: [planId], references: [id])

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  addressId String?
  address   Address? @relation(fields: [addressId], references: [id])

  salesRepresentativeId String?
  salesRepresentative   SalesRepresentative? @relation(fields: [salesRepresentativeId], references: [id])

  serviceDate DateTime

  orderGroupId String?
  orderGroup   OrderGroup? @relation(fields: [orderGroupId], references: [id])

  startPointId      String?
  businessSegmentId String?
  businessSegment   BusinessSegment? @relation(fields: [businessSegmentId], references: [id])

  value             Float
  volume            Float?
  weight            Float?
  cases             Int?
  instructions      String?
  requiresSignature Boolean
  actualValue       Float
  notes             String?
  status            OrderStatus
  statusConfirmed   Boolean?
  statusTimestamp   DateTime?

  deliveryVisitId String?
  deliveryVisit   Visit?  @relation("DeliveryVisitOrders", fields: [deliveryVisitId], references: [id])
  pickupVisitId   String?
  pickupVisit     Visit?  @relation("PickupVisitOrders", fields: [pickupVisitId], references: [id])

  lineItems             LineItem[]
  deliveryReassignments DeliveryReassignment[]
}

model LineItem {
  id      String  @id
  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id])

  productId String?
  product   Product? @relation(fields: [productId], references: [id])

  lineNumber       Int?
  quantity         Float
  unitPrice        Float
  taxRate          Float
  value            Float?
  actualQuantity   Float
  actualValue      Float
  status           String
  returnedReasonId String?
  returnedReason   Reason? @relation(fields: [returnedReasonId], references: [id])
  notes            String?
}

model Product {
  id          String  @id
  description String?

  lineItems LineItem[]
}

model PaymentMethod {
  id         String            @id @default(cuid())
  method     PaymentMethodType
  value      Float
  documentId String?

  bankId String?
  bank   Bank?   @relation(fields: [bankId], references: [id])

  accountNumber String?

  visitId String
  visit   Visit  @relation(fields: [visitId], references: [id])
}

model DeliveryReassignment {
  id                 String   @id @default(cuid())
  orderId            String
  order              Order    @relation(fields: [orderId], references: [id])
  fromDeliveryPlanId String
  fromOrderGroupId   String?
  toDeliveryPlanId   String
  toOrderGroupId     String?
  orderValue         Float
  timestamp          DateTime

  visitId String
  visit   Visit  @relation(fields: [visitId], references: [id])
}

model SalesRepresentative {
  id   String @id
  name String

  orders Order[]
}

model OrderGroup {
  id     String  @id
  orders Order[]
}

model RouteGroup {
  id          String  @id
  name        String
  description String?

  routes Route[]
}

model Route {
  id           String     @id
  routeGroupId String
  routeGroup   RouteGroup @relation(fields: [routeGroupId], references: [id])

  startPointId String
  startPoint   PointOfInterest @relation("RouteStartPoint", fields: [startPointId], references: [id])

  endPointId String
  endPoint   PointOfInterest @relation("RouteEndPoint", fields: [endPointId], references: [id])

  assignedTruckId String?
  assignedTruck   Truck?  @relation("AssignedTruck", fields: [assignedTruckId], references: [id])

  assignedTruckTypeId String?
  assignedTruckType   TruckType? @relation("AssignedTruckType", fields: [assignedTruckTypeId], references: [id])

  assignedUserId String

  stops RouteStop[]

  plans Plan[]
}

model RouteStop {
  routeId String
  route   Route  @relation(fields: [routeId], references: [id])

  addressId String
  address   Address @relation(fields: [addressId], references: [id])

  sequence Int

  @@id([routeId, sequence])
}

model Truck {
  id          String     @id
  label       String?
  truckTypeId String?
  truckType   TruckType? @relation(fields: [truckTypeId], references: [id])

  plans  Plan[]
  routes Route[] @relation("AssignedTruck")
}

model TruckType {
  id        String  @id
  label     String
  size      Int
  maxCases  Int
  maxValue  Float
  maxVolume Float
  maxWeight Float
  notes     String?

  trucks Truck[]
  routes Route[] @relation("AssignedTruckType")
}

model Bank {
  id   String @id
  name String

  paymentMethods PaymentMethod[]
}

model Reason {
  id      String @id
  labelEn String
  labelEs String

  lineItems LineItem[]
}
